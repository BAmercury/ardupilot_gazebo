<?xml version="1.0" ?>
<sdf version="1.6">
  <world name="default">
    <gui>
      <camera name="user_camera">
        <pose>-3.012870 0.455695 15.817830 -0.000002 1.393796 0.013203</pose>
      </camera>
      <!-- plugin name="GUIResetWorld" filename="libgui_resetworld.so"/ -->
    </gui>

    <!-- plugin name="listen" filename="libResetWorld.so"/ -->


    <!-- Physics ODE Solver Configuration -->
    <physics type="ode">
      <ode>
        <solver>
          <type>quick</type>
          <iters>100</iters>
          <sor>1.0</sor>
        </solver>
        <constraints>
          <cfm>0.0</cfm>
          <erp>0.9</erp>
          <!-- Set contact max correcting vel to 0 and objects wont bounce off each other -->
          <contact_max_correcting_vel>0.1</contact_max_correcting_vel>
          <contact_surface_layer>0.0</contact_surface_layer>
        </constraints>
      </ode>
      <!-- Gazebo Unstable Flight issue: 
          https://discuss.ardupilot.org/t/arducopter-3-6-sitl-with-gazebo-unstable-flight/34451/12
          Set update params accordingly to attempt to fix 
      -->
      <real_time_update_rate>1000</real_time_update_rate>
      <!-- real_time_update_rate>-1</real_time_update_rate-->
      <max_step_size>0.001</max_step_size>
    </physics>

    <include>
      <uri>model://sun</uri>
    </include>

    <include>
      <uri>model://ground_plane</uri>
    </include>
    <!-- Import Drone Model -->
    <model name="iris">
      <pose>1 -1 0.004 0 0 0</pose>
      <include>
        <uri>model://iris_with_standoffs_demo</uri>
      </include>

      <!-- add new camera -->
      <link name='camera'>
        <pose>0 -0.01 0.070 1.57 0 1.57</pose>
        <inertial>
          <pose>0 0 0 0 0 0</pose>
          <mass>0.1</mass>
          <inertia>
            <ixx>0.001</ixx>
            <ixy>0</ixy>
            <ixz>0</ixz>
            <iyy>0.001</iyy>
            <iyz>0</iyz>
            <izz>0.001</izz>
          </inertia>
        </inertial>
        <visual name='visual'>
          <pose>0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius>0.025</radius>
              <length>0.025</length>
            </cylinder>
          </geometry>
           <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Grey</name>
            </script>
          </material>
        </visual>
        <sensor name="camera" type="camera">
          <pose>0 0 0 -1.57 -1.57 0</pose>
          <camera>
            <horizontal_fov>1.57</horizontal_fov> <!-- 90 degrees-->
            <!--<horizontal_fov>1.0427</horizontal_fov>--> 
            <image>
              <width>320</width>
              <height>240</height>
            </image>
            <clip>
              <near>0.05</near>
              <far>1000</far>
            </clip>
          </camera>
          <always_on>1</always_on>
          <update_rate>10</update_rate>
          <visualize>true</visualize>

          <plugin name="irlock" filename="libArduCopterIRLockPlugin.so">
              <fiducial>rail_system</fiducial>
          </plugin>
        </sensor>
      </link>

      <!-- attach camera -->
      <joint type="revolute" name="base_camera_joint">
        <pose>0 0 0.0 0 0 0</pose>
        <parent>iris::iris_demo::gimbal_small_2d::tilt_link</parent>
        <child>camera</child>
        <axis>
          <limit>
            <lower>0</lower>
            <upper>0</upper>
          </limit>
          <xyz>0 0 1</xyz>
          <use_parent_model_frame>true</use_parent_model_frame>
        </axis>
      </joint>
    </model>

    <model name="rail_system">
      <pose>1.0 -1.0 0.005 0 0 0</pose>

      <include>
        <uri>model://rail_system</uri>
      </include>
      <plugin name="RailSim" filename="libRailSimPlugin.so">
        <motion_profile>
          <!--
            1: Velocity Sine Wave, 2: Profile 1, 3: Simulated Dynamics Pose Controller
            Motion profile type 2 directly moves the beacon according to the chosen profile header data. Depending on how the data is formatted, the rail sim behaves very snappy and moves extremely quickly to reach the desired waypoints

            Motion profile 3 is a state feedback controller that takes desired position inputs as a reference and controls the rail sim by exerting a force.
            It can follow the same motion profile header data as option 2 but it has slower response as its meant to simulate a more realistic response. Recommended to use this mode to simulate less agile/aggressive trajectories (Ramps, steps, etc.) as well as to simulate a rail sim that moves a bit more realistically
          
            Motion Profile 4 is a Step input. The parameters are described as followed:
              Target1: Distance from origin to first target in meters
              Target1Hold: Time in seconds to hold at the first target position
              Target2: Distance from target1 to some desired location (Usually origin) in meters
              Target2Hold: Time in seconds to hold at the second target position
              Loop: Loop this motion profile over and over or stop movement altogether. 1 for on, 0 for off
          -->

          <type>4</type>
          
          <!-- Used for Velocity Sine Wave Profile, if type is not 1 then this will simply be ignored -->
          <amplitude>2.0</amplitude>
          <max_velocity>2</max_velocity> <!-- M/S -->
          <direction>2</direction> <!--In Gazebo Coordinates: 1=X, 2=Y, 3=Z -->

          <!-- Used for motion profile 4. If the type is not 4 then this will simply be ignored -->
          <Target1>5</Target1>
          <Target1Hold>10</Target1Hold>
          <Target2>0</Target2>
          <Target2Hold>5</Target2Hold>
          <Loop>1</Loop>

        </motion_profile>
      </plugin>

    </model>

  </world>
</sdf>
